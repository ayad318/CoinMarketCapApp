plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'jacoco'
}

sourceCompatibility = 1.17
targetCompatibility = 1.17

repositories {
    mavenCentral()
}

javafx {
    version = "17.0.2"
    modules = [ 'javafx.controls' , 'javafx.media']
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.4.0'
    testImplementation 'org.mockito:mockito-inline:4.4.0'
    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
    
    implementation 'org.controlsfx:controlsfx:11.1.1'

    implementation 'com.google.zxing:core:3.2.0'
    implementation 'com.google.zxing:javase:3.2.0'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.httpcomponents:httpmime:4.5.13'

}

application {
    // Define the main class for the application.
    mainClass = 'major_project.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
    applyTo run
}
tasks.register('applicationCodeCoverageReport', JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}